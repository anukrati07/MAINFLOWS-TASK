# -*- coding: utf-8 -*-
"""TASK 7

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oeUDxBHiNX7kKs3zUv7dQdvtIKZMT5Kl

Part 1: Dimensionality Reduction
"""

import numpy as np
import matplotlib.pyplot as plt
from sklearn.decomposition import PCA
from sklearn.datasets import load_iris
from sklearn.preprocessing import StandardScaler

# Load the Iris dataset
iris = load_iris()
X = iris.data  # Features
y = iris.target  # Labels
target_names = iris.target_names

# Standardize the features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Apply PCA to reduce to 2 dimensions
pca = PCA(n_components=2)
X_pca = pca.fit_transform(X_scaled)

# Scatter plot of the reduced data
plt.figure(figsize=(8, 6))
colors = ['red', 'green', 'blue']
for i, target_name in enumerate(target_names):
    plt.scatter(X_pca[y == i, 0], X_pca[y == i, 1],
                label=target_name, color=colors[i], alpha=0.7)

plt.xlabel('Principal Component 1')
plt.ylabel('Principal Component 2')
plt.title('PCA Visualization of the Iris Dataset')
plt.legend()
plt.grid(True)
plt.show()

"""Stock Price Prediction Using Time Series
Forecasting

LOAD THE DATASET
"""

import pandas as pd
import matplotlib.pyplot as plt
from statsmodels.tsa.seasonal import seasonal_decompose
from statsmodels.tsa.stattools import adfuller
from statsmodels.tsa.arima.model import ARIMA
from sklearn.metrics import mean_absolute_error, mean_squared_error
import numpy as np

# Load dataset
df = pd.read_csv("/content/stock_prices.csv")

# Convert Date column to datetime format
df['Date'] = pd.to_datetime(df['Date'])

# Handle missing values
df = df.dropna()

# Set Date as the index
df.set_index('Date', inplace=True)

# Display dataset information
print(df.info())
print(df.head())

"""EDA- PLOT CLOSING PRICES"""

plt.figure(figsize=(10,5))
plt.plot(df['Close'], label='Closing Price', color='blue')
plt.xlabel('Date')
plt.ylabel('Close Price')
plt.title('Stock Closing Prices Over Time')
plt.legend()
plt.show()

"""SEASONAL DECOMPOSITION"""

decomposition = seasonal_decompose(df['Close'], model='additive', period=30)
decomposition.plot()
plt.show()

"""ADF TEST"""

adf_test = adfuller(df['Close'])
print(f"ADF Statistic: {adf_test[0]}")
print(f"P-Value: {adf_test[1]}")
if adf_test[1] < 0.05:
    print("The data is stationary.")
else:
    print("The data is not stationary. Differencing is required.")

"""FEATURE ENGINEERING"""

df['Close_Lag1'] = df['Close'].shift(1)
df.dropna(inplace=True)

df['Moving_Avg'] = df['Close'].rolling(window=5).mean()
df.dropna(inplace=True)

"""TRAINING AN ARIMA MODEL"""

from statsmodels.graphics.tsaplots import plot_acf, plot_pacf

fig, axes = plt.subplots(1, 2, figsize=(12, 4))
plot_acf(df['Close'], lags=20, ax=axes[0])
plot_pacf(df['Close'], lags=20, ax=axes[1])
plt.show()

# Define ARIMA model
model = ARIMA(df['Close'], order=(1,1,1))  # (p, d, q) can be tuned
arima_model = model.fit()

# Forecast next 30 days
forecast = arima_model.forecast(steps=30)
print(forecast)

"""EVALUATION AND VISUALIZATION"""

df['Predicted_Close'] = arima_model.fittedvalues

plt.figure(figsize=(10,5))
plt.plot(df['Close'], label='Actual Close', color='blue')
plt.plot(df['Predicted_Close'], label='Predicted Close', color='red', linestyle="dashed")
plt.xlabel('Date')
plt.ylabel('Stock Price')
plt.title('Actual vs. Predicted Stock Prices')
plt.legend()
plt.show()

y_actual = df['Close']
y_pred = df['Predicted_Close']

mae = mean_absolute_error(y_actual, y_pred)
rmse = np.sqrt(mean_squared_error(y_actual, y_pred))
mape = np.mean(np.abs((y_actual - y_pred) / y_actual)) * 100

print(f"MAE: {mae}")
print(f"RMSE: {rmse}")
print(f"MAPE: {mape:.2f}%")