# -*- coding: utf-8 -*-
"""TASK 6

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1x422NyKxsVwQ9aUYPwaydjBbTovFDGnI

TASK 1:TIME SERIES ANALYSIS
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime, timedelta
from statsmodels.tsa.arima.model import ARIMA
from sklearn.metrics import mean_squared_error, mean_absolute_percentage_error

df=pd.read_csv("sales_data.csv")

df.head(5)

"""VISUALIZATION"""

plt.figure(figsize=(12,6))
sns.lineplot(x=df['Date'], y=df['Sales'], label='Sales')
plt.title('Sales Over Time')
plt.xlabel('Date')
plt.ylabel('Sales')
plt.legend()
plt.show()

"""USE ARIMA FOR FORCASTING"""

train_size= int(len(df)*0.8)
train, test= df['Sales'][:train_size], df['Sales'][train_size:]
model= ARIMA(train, order=(5,1,0))
model_fit = model.fit()

forecast= model_fit.forecast(steps=len(test))

rmse = np.sqrt(mean_squared_error(test, forecast))
mape = mean_absolute_percentage_error(test, forecast)
print(f'RMSE: {rmse:.2f}')
print(f'MAPE: {mape:.2%}')

plt.figure(figsize=(12,6))
plt.plot(df["Date"][train_size:],test, label='Actual Sales', color = 'blue')
plt.plot(df["Date"][train_size:], forecast, label='Forecast', color = 'red', linestyle= 'dashed')
plt.title('Sales Forecasting using ARIMA')
plt.xlabel('Date')
plt.ylabel('Sales')
plt.legend()
plt.show()

forecast_df = pd.DataFrame({'Date': df['Date'][train_size:], 'Forecast': forecast})
print(forecast_df.head())

"""TASK 2:Predicting Heart Disease Using
Logistic Regression
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import confusion_matrix, classification_report

import pandas as pd
import numpy as np

# Set number of samples
num_samples = 500

# Generate synthetic data
np.random.seed(42)
ages = np.random.randint(30, 80, num_samples)
genders = np.random.choice(['Male', 'Female'], num_samples)
cholesterol = np.random.randint(150, 300, num_samples)
blood_pressure_systolic = np.random.randint(90, 180, num_samples)
blood_pressure_diastolic = np.random.randint(60, 120, num_samples)
heart_disease = np.random.choice([0, 1], num_samples, p=[0.6, 0.4])  # 40% positive cases

# Create DataFrame
df = pd.DataFrame({
    'Age': ages,
    'Gender': genders,
    'Cholesterol': cholesterol,
    'Blood Pressure Systolic': blood_pressure_systolic,
    'Blood Pressure Diastolic': blood_pressure_diastolic,
    'Heart Disease': heart_disease
})

# Save dataset to CSV
df.to_csv('heart_disease.csv', index=False)

# Display first few rows
print(df.head())

from google.colab import files
files.download('heart_disease.csv')

df1=pd.read_csv("heart_disease.csv")

df1.head(5)

print('Missing Values:\n', df1.isnull().sum())

print('Duplicate rows:', df1.duplicated().sum())

gender_encoder = LabelEncoder()
df1['Gender'] = gender_encoder.fit_transform(df1['Gender'])

"""feature engineering"""

scaler = StandardScaler()
df1[['Age', 'Cholesterol', 'Blood Pressure Systolic', 'Blood Pressure Diastolic']] = scaler.fit_transform(df1[['Age', 'Cholesterol', 'Blood Pressure Systolic', 'Blood Pressure Diastolic']])

"""TRAINING"""

X= df1.drop(columns={"Heart Disease"})
y = df1["Heart Disease"]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = LogisticRegression()
model.fit(X_train, y_train)
y_pred = model.predict(X_test)

conf_matrix= confusion_matrix(y_test, y_pred)
print('Confusion Matrix:\n', conf_matrix)
print("Classification Report:\n", classification_report(y_test, y_pred))