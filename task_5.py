# -*- coding: utf-8 -*-
"""TASK 5

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZSUfXs_7hjk9ovyvVtGeMA1kL6b1kido

TASK 1 : STUDENT PASS/FAIL PREDICTION
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix

# Step 1: Create Dataset
np.random.seed(42)
n = 200
study_hours = np.random.uniform(0, 20, n)
attendance = np.random.uniform(50, 100, n)

# Define pass/fail criteria (simple rule-based generation)
def pass_fail(sh, att):
    return 1 if sh > 5 and att > 75 else 0

pass_fail_labels = np.array([pass_fail(sh, att) for sh, att in zip(study_hours, attendance)])

df = pd.DataFrame({'Study Hours': study_hours, 'Attendance': attendance, 'Pass': pass_fail_labels})

# Step 2: Data Exploration
print("Missing Values:\n", df.isnull().sum())
print("Dataset Summary:\n", df.describe())

# Visualization
sns.pairplot(df, hue='Pass', palette='coolwarm')
plt.show()

# Step 3: Model Training
X = df[['Study Hours', 'Attendance']]
y = df['Pass']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = LogisticRegression()
model.fit(X_train, y_train)

# Step 4: Model Evaluation
y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
conf_matrix = confusion_matrix(y_test, y_pred)

print("Model Accuracy:", accuracy)
print("Confusion Matrix:\n", conf_matrix)

# Confusion Matrix Heatmap
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=['Fail', 'Pass'], yticklabels=['Fail', 'Pass'])
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

"""TASK 2 : SENTIMENT ANALYSIS WITH NATURAL LANGUAGE PROCESSING"""

import pandas as pd
import numpy as np
import re
import string
import nltk
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
from nltk.stem import WordNetLemmatizer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

# Download necessary NLTK resources
nltk.download('stopwords')
nltk.download('punkt')
nltk.download('wordnet')
nltk.download('punkt_tab')

# Step 1: Create Dataset
data = {'Review Text': [
    "I love this product! It's amazing.",
    "Terrible experience. Will not buy again!",
    "Pretty good quality, but a bit expensive.",
    "Absolutely awful! Waste of money.",
    "Great service and fantastic product!"
],
    'Sentiment': ['positive', 'negative', 'positive', 'negative', 'positive']}
df = pd.DataFrame(data)

# Step 2: Preprocessing
def preprocess_text(text):
    text = text.lower()
    text = re.sub(f"[{string.punctuation}]", "", text)
    tokens = word_tokenize(text)
    tokens = [word for word in tokens if word not in stopwords.words('english')]
    lemmatizer = WordNetLemmatizer()
    tokens = [lemmatizer.lemmatize(word) for word in tokens]
    return " ".join(tokens)

df['Processed Review'] = df['Review Text'].apply(preprocess_text)

# Step 3: Text Vectorization
vectorizer = TfidfVectorizer()
X = vectorizer.fit_transform(df['Processed Review'])
y = df['Sentiment'].map({'positive': 1, 'negative': 0})

# Step 4: Model Training
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
model = LogisticRegression()
model.fit(X_train, y_train)
y_pred = model.predict(X_test)

# Step 5: Model Evaluation
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)

print(f"Accuracy: {accuracy}")
print(f"Precision: {precision}")
print(f"Recall: {recall}")
print(f"F1-Score: {f1}")